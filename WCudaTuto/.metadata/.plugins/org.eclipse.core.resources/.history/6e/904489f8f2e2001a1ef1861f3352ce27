#include "MontecarloMulti.h"

#include <iostream>
#include <assert.h>

#include "Montecarlo.h"
#include "Hardware.h"

using std::cerr;
using std::cout;
using std::endl;
using std::string;
using std::to_string;

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/**
 * static
 */
int MontecarloMulti::NB_DEVICE = Hardware::getDeviceCount();

/*--------------------------------------*\
 |*		Constructeur			*|
 \*-------------------------------------*/

MontecarloMulti::MontecarloMulti(const Grid& grid , entier nbDarTotalAsk , double* ptrPiHat , float h , bool isVerbose) :
	RunnableGPU(grid, title(nbDarTotalAsk, h), isVerbose), // classe parente
//
	nbDarTotalAsk(nbDarTotalAsk), //
	ptrPiHat(ptrPiHat), //
	h(h), //
	grid(grid)
    {
    this->nbDarByDevice = nbDarTotalAsk / NB_DEVICE;
    assert(nbDarByDevice >= grid.threadCounts());

    // warning
	{
	// TODO MontecarloMulti : charger les drivers de tous les gpus avec:
	//
	//		Hardware::loadCudaDriverAll();
	//
	// sinon votre code multi gpu sera sequentiel!
	// Le mieux est de faire ca dans main.cpp:
	//
	// 	DeviceDriver::LOAD_ALL;
	}

    // pas dans run pour raison performance
	{
	tabPtrMontecarlo=new Montecarlo*[NB_DEVICE];
#pragma omp parallel for
	for (int deviceID = 0; deviceID < NB_DEVICE; ++deviceID)
	    {
	    Hardware::setDevice(deviceID);

	    tabPtrMontecarlo[deviceID] = new Montecarlo(grid, nbDarByDevice, ptrPiHat, h, isVerbose);
	    }
	}
    }

MontecarloMulti::~MontecarloMulti()
    {
    for (int deviceID = 0; deviceID < NB_DEVICE; ++deviceID)
	{
	delete tabPtrMontecarlo[deviceID];
	}

    delete[] tabPtrMontecarlo;
    }

/*--------------------------------------*\
 |*		Methode			*|
 \*-------------------------------------*/

void MontecarloMulti::run()
    {
    this->nbDarTotalEffective = 0;
    entier nbDarUnderCurve = 0;

#pragma omp parallel for
    for (int deviceID = 0; deviceID < NB_DEVICE; ++deviceID)
	{
	Hardware::setDevice(deviceID);

	//Montecarlo montecarlo(grid, nbDarByDevice, ptrPiHat, h, isVerbose);
	//montecarlo.run();

	Montecarlo* ptrMontecarlo = tabPtrMontecarlo[deviceID];
	ptrMontecarlo->run();

#pragma omp critical(blabla)
	    {
	    nbDarUnderCurve += ptrMontecarlo->getNbDarUnderCurve();
	    this->nbDarTotalEffective += ptrMontecarlo->getNbDarTotalEffective();
	    }
	}

    *this->ptrPiHat = this->h * nbDarUnderCurve / this->nbDarTotalEffective;
    }

/*----------------*\
 |*	get        *|
 \*---------------*/

entier MontecarloMulti::getNbDarTotalEffective()
    {
    return nbDarTotalEffective;
    }

double MontecarloMulti::getInputGO()
    {
    return (nbDarTotalEffective / (double)1024 / (double)1024 / (double)1024) * sizeof(float) * 2;
    }

/*----------------*\
 |*	set        *|
 \*---------------*/

void MontecarloMulti::setH(float h)
    {
    this->h = h;
    }

/*----------------*\
 |*  private       *|
 \*---------------*/

string MontecarloMulti::title(entier nbDarTotalAsk , float h)
    {
    return "MontecarloMulti-" + entierToString() + "-" + to_string(nbDarTotalAsk) + "-h" + to_string((int)h);
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
