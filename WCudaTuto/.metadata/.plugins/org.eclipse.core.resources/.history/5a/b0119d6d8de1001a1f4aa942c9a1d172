#include <stdlib.h>
#include <iostream>
#include <string>
#include <iomanip>

#include "CppTest.h"
#include "cudas.h"

#include "TestVector.h"

#include "TestReductionAddI.h"
#include "TestReductionAddII.h"

#include "TestReductionGenericI.h"
#include "TestReductionGenericII.h"

#include "TestReductionGenericLongII.h"

#include "TestSliceGM.h"
#include "TestSliceSM.h"
#include "TestMontecarlo.h"
#include "TestMontecarloMulti.h"

#include "Folders.h"
#include "Chrome.h"

using std::string;
using std::cout;
using std::endl;

using Test::Suite;

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

int mainTest()
    {
    Suite testSuite;

	testSuite.add(std::auto_ptr < Suite > (new TestVector()));

    // Slice
	{
	testSuite.add(std::auto_ptr < Suite > (new TestSliceGM()));
	testSuite.add(std::auto_ptr < Suite > (new TestSliceSM()));
	}

    // ReductionTools
	{
	// atomic
	//testSuite.add(std::auto_ptr < Suite > (new TestReductionAddI()));
	//testSuite.add(std::auto_ptr < Suite > (new TestReductionAddII()));

	// generic
	//testSuite.add(std::auto_ptr < Suite > (new TestReductionGenericI()));
	//testSuite.add(std::auto_ptr < Suite > (new TestReductionGenericII()));

	// long
	testSuite.add(std::auto_ptr < Suite > (new TestReductionGenericLongII()));
	}

    // Montecarlo
	{
	testSuite.add(std::auto_ptr < Suite > (new TestMontecarlo()));
	testSuite.add(std::auto_ptr < Suite > (new TestMontecarloMulti()));
	}

// title list : usefull for the final rendu
//
//	testReductionAdd_int_PI
//	testReductionAdd_int_PII
//
//	testReduction_int_PI
//	testReduction_int_PII
//	testReduction_long_PII
//
//	testSliceGM
//	testSliceGM_plus
//	testSliceSM
//
//	testMontecarlo_int
//	testMontecarlo_long
//
//	testMontecarlo_multi_int
//	testMontecarlo_multi_long
//
//	testAll

// run
	{
	string folder = "./out";
	string title = "testAll"; // see above, title list
	string fileHTML = title + ".html";

	Folders::mkdirP(folder);

	int result = CppTest::run(folder, fileHTML, title, testSuite, OutputType::HTML); // HTML CONSOLE

	Chrome::showHTML(folder, fileHTML); // to be commented if OutputType::CONSOLE

	return result;
	}
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

